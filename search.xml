<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python  递归组织树形菜单栏数据</title>
    <url>/%E6%8A%80%E6%9C%AF/20171210-python-recursive-handle-data.html</url>
    <content><![CDATA[<p>工作中遇到一个层级较深的菜单栏需求，采用递归方案处理。顺便提下递归的三个特性</p>
<blockquote>
<ol>
<li>必须要有一个明确的结束条件, 否则就变成死循环导致栈溢出</li>
<li>每次更深一层的递归，问题规模应有所减少，否则无限递归导致栈溢出。</li>
<li>递归效率比较低，递归层次过多会导致栈溢出。</li>
</ol>
</blockquote>
<a id="more"></a>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sql_result &#x3D; [&#123;&#39;id&#39;: &#39;0&#39;, &#39;name&#39;: &#39;home&#39;, &#39;path&#39;: &#39;&#x2F;main&#x2F;home&#x2F;&#39;, &#39;text&#39;: &#39;首页&#39;, &#39;icon&#39;: &#39;icon-houtai1&#39;, &#39;parentid&#39;: &#39;&#39;&#125;,</span><br><span class="line"> &#123;&#39;id&#39;: &#39;02&#39;, &#39;name&#39;: &#39;#&#39;, &#39;path&#39;: &#39;#&#39;, &#39;text&#39;: &#39;主机资产&#39;, &#39;icon&#39;: &#39;icon-xingzhuang&#39;,</span><br><span class="line">  &#39;parentid&#39;: &#39;&#39;&#125;,</span><br><span class="line"> &#123;&#39;id&#39;: &#39;021&#39;, &#39;name&#39;: &#39;host_assets_management&#39;, &#39;path&#39;: &#39;&#x2F;main&#x2F;host_assets_management&#x2F;&#39;,</span><br><span class="line">  &#39;text&#39;: &#39;主机登记&#39;, &#39;icon&#39;: &#39;icon-caidan&#39;, &#39;parentid&#39;: &#39;02&#39;&#125;,</span><br><span class="line"> &#123;&#39;id&#39;: &#39;023&#39;, &#39;name&#39;: &#39;#&#39;, &#39;path&#39;: &#39;#&#39;, &#39;text&#39;: &#39;主机监控&#39;, &#39;icon&#39;: &#39;icon-caidan&#39;,</span><br><span class="line">  &#39;parentid&#39;: &#39;02&#39;&#125;,</span><br><span class="line"> &#123;&#39;id&#39;: &#39;0231&#39;, &#39;name&#39;: &#39;host_basic_config&#39;, &#39;path&#39;: &#39;&#x2F;main&#x2F;host_basic_config&#x2F;&#39;,</span><br><span class="line">  &#39;text&#39;: &#39;基础配置&#39;, &#39;icon&#39;: &#39;icon-shuju&#39;, &#39;parentid&#39;: &#39;0230&#39;&#125;,</span><br><span class="line"> &#123;&#39;id&#39;: &#39;0232&#39;, &#39;name&#39;: &#39;host_monitor_config&#39;, &#39;path&#39;: &#39;&#x2F;main&#x2F;host_monitor_config&#x2F;&#39;,</span><br><span class="line">  &#39;text&#39;: &#39;监控项配置&#39;, &#39;icon&#39;: &#39;icon-shuju&#39;, &#39;parentid&#39;: &#39;023&#39;&#125;,</span><br><span class="line"> &#123;&#39;id&#39;: &#39;0233&#39;, &#39;name&#39;: &#39;host_monitor_main_config&#39;,</span><br><span class="line">  &#39;path&#39;: &#39;&#x2F;main&#x2F;host_monitor_main_config&#x2F;&#39;, &#39;text&#39;: &#39;主机监控&#39;, &#39;icon&#39;: &#39;icon-shuju&#39;,</span><br><span class="line">  &#39;parentid&#39;: &#39;023&#39;&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def clear_parent_field(i):</span><br><span class="line">    return &#123;a: b for a, b in i.items() if a !&#x3D; &#39;parentid&#39;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def menu_router(sql_result, parentid&#x3D;&#39;&#39;):</span><br><span class="line">    menu_list &#x3D; []</span><br><span class="line">    for i in sql_result:</span><br><span class="line">        if i[&#39;parentid&#39;] &#x3D;&#x3D; parentid:</span><br><span class="line">            menu_list.append(clear_parent_field(&#123;**i, &#39;children&#39;: menu_router(sql_result, i[&#39;id&#39;])&#125;))</span><br><span class="line">    return menu_list</span><br><span class="line"></span><br><span class="line">result &#x3D; menu_router(sql_result)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊人对动物驯化史</title>
    <url>/%E6%80%9D%E7%BB%B4/20170812-People_Animal.html</url>
    <content><![CDATA[<p><img src="https://zhangjiabin.oss-cn-beijing.aliyuncs.com/img/people-animals.jpg" alt="people_animals"><br>“社畜”是如何被驯化的？</p>
<a id="more"></a>


<p>1</p>
<p>近一百年最成功的动物</p>
<p>　　有人说，最代表城市化的指标，不是人口，而是“狗口”。</p>
<p>　　从 2008 年到 2017 年，我国宠物的数量从 3000 万只增长到 2.5 亿只，年均增长率 25.6%，而同期上海常住人口的年均增长率不到3%。</p>
<p>　　根据统计，人与狗数量的比值，全球平均值在 10：1 左右。一般而言，狗占了宠物数量的三分之一，再加上没有统计到的农村里的狗、流浪狗，我国才刚刚达到全球平均水平。</p>
<p>　　未来会怎样呢？发达国家的“人狗比”是4：1，可能是我们 10 年后的水平，也就是说，未来十年“狗口”的增速还是在两位数。</p>
<p>　　如果以数量论英雄的话，细菌可能是地球史上最成功的物种，人类算是近几百万年最成功的动物，而近一百年最成功的，非狗莫属了。</p>
<p>　　相比而言，狗的老祖宗——狼，就有点寒碜，已经混成了“国家一级保护动物”了。</p>
<p>　　所以千万不要小看狗的成功。有一回，我跟几个朋友讨论“狼性文化”，有人撇撇嘴：我怎么觉得越是强调“狼性”的公司，狗反而越多？</p>
<p>　　你看，不管是强调“人性化”的城市，还是“狼性化”的公司，狗都混得很好，这就值得我专门写一篇文章，从进化论、社会学、组织行为学等多角度分析一下“狗成功学”了。 </p>
<p>　　2</p>
<p>　　古有六畜，今有“社畜”</p>
<p>　　人类的历史就是一部对野生动植物的驯化史，我们今天吃的稻米、麦子、豆类、蔬菜，等等，几乎所有的食物都是从野生品种一代代杂交而成的“人造植物”。还有过去的“六畜”，马、牛、羊、鸡、狗、猪，它们的祖先也都是野生动物。</p>
<p>　　不过“六畜”中的狗有点不一样，狗属于狼的一种，属于“食肉目犬科犬属狼种（Canis lupus）”中的家犬亚种，并非驯化而来，而是由一些自愿跟人交朋友的狼演化而成。</p>
<p>　　狼是一种群居的动物，一般离群独居的狼是很难生存的，但人的出现改变了这个结论，一些离群的狼来到了人类生活的周围，以吃人剩下来的食物残渣和粪便为生。</p>
<p>　　当然，事情没那么简单，狼是肉食动物，人类的食物残渣里可是什么都有，大部分成份，狼都适应不了，还是死路一条。</p>
<p>　　不过，还是有一小部分的狼活了下来，因为它们天生就有基因突变，可以消化淀粉，就变成了杂食动物，这个原本无用的“消化淀粉基因”，因为人类的出现，竟然成功地点亮了“进化树”的一个新分支——狗，从此开始了征服地球的道路。</p>
<p>　　可以说，狼变狗的进化模式，是人类成为地球的“超级物种”后，其他物种的一种“依附型”的进化策略。从效果看，这个策略非常成功，可以开一门“狗成功学”的课。剩下那些没有变成狗的狼们，生存空间越来越小，数量也越来越少。</p>
<p>　　不过，这个进化策略并不是狗的专利。</p>
<p>　　16 世纪之后，人类进入资本主义社会，这个世界上也进化出一种叫“公司”的新超级物种，今天，如果把国家也看成一个“超级大公司”的话，公司几乎控制了人类大部分的资产。</p>
<p>　　而人类的最佳生存策略就是依附于这个“超级物种”，所以到了 21 世纪，一部日剧《无法成为野兽的我们》，让我们这些公司人成了一个新的物种——社畜。<br>　　<br><img src="https://zhangjiabin.oss-cn-beijing.aliyuncs.com/img/people-animals2.jpg" alt=""></p>
<p>古有六畜，今有“社畜”，这个名字起得一点都不夸张，不信就来对比一下“人类驯化动物”和“我们被公司驯化”的过程，那是一样儿一样儿滴。</p>
<p>　　3</p>
<p>　　驯化动物的六个条件</p>
<p>　　有个问题，我们的祖先为啥不驯服老虎，这样，人不就天下无敌了吗？</p>
<p>　　答案就在一本叫《枪炮、病菌与钢铁》的书中，本书主要讲述了环境对人类发展的巨大影响，其中第九章，讲的是人类驯化野生动物的过程，有一个“安娜▪卡列宁娜定律”：</p>
<p>　　“驯化的动物都是可驯化的，未驯化的动物各有各的不可驯化之处。”</p>
<p>　　古人类抓到动物，肯定是要吃掉的，为什么没吃而是好吃好喝地养起来呢，肯定是因为这些动物符合人类的某些需要。《枪炮、病菌与钢铁》总结了“可驯化动物”的六个条件，我拿来跟“公司驯化我们”的过程进行对比：</p>
<p>　　第一，“驯化成本”要低</p>
<p>　　前面说了，狼中只有那些能消化杂食的，才能变成狗。这就是“驯化成本”的问题，人类自己都吃不到肉，哪里有你的份呢？这个因素也排除了狮子老虎这种一天要吃几斤肉的大家伙，它们能捕到的猎物，恐怕只够它们自己吃。</p>
<p>　　这也导致了牛、猪和绵羊在驯化中形体变小了，因为要节省成本。</p>
<p>　　人很难从外观上判断驯化成本，所以，大公司喜欢校招，美名曰“一张白纸”，其实就是驯化的试错成本低。</p>
<p>　　第二，生长速度要快</p>
<p>　　这个标准排除了大象，虽然它吃素好养活，身上肉也多，但缺点是长得比人还慢，划不来。</p>
<p>　　猪在这方面很有优势，它吃得不少，但长得更快，养几个月就可以杀了吃了。这也导致了现在的鸡鸭都是速生品种，《麦兜故事》里有一句台词：“这只火鸡死后在冰箱里的时间，比它活着的时间还长”。</p>
<p>　　知道公司为什么需要进步速度快的员工了吧？这个条件在公司驯化中，亲测有效哦。</p>
<p>　　第三、力气可以大，但性格尽可能温和</p>
<p>　　驯化的目的就是限制动物身上的野性，但明显很多动物是“野性难驯”的，比如灰熊、野牛、河马，它们都是杂食动物，生长都很快，肉都很多，力气都很大，理论上可以帮助种地拉货，还可以吃。但问题在于，它们都极度危险。在很多地区，这些动物常常被养到一岁就杀掉。人类为了征服它们，吃了不少亏，最后才不得不放弃。</p>
<p>　　嗯，这就是“刺头们”在公司呆不长的原因，就算能力很强、公司很需要的人才，也只能在执行层做事。</p>
<p>　　第四，性格需要温和，但不要多愁善感</p>
<p>　　很多大型食草动物在长期的生存竞争中，进化出“神经紧张，动作敏捷”的特点，帮助它们在危险中逃生，但这个性格非常不利于驯化，比如鹿和羚羊，把它们关在围栏里，它们就会惊恐不安，最终不是抑郁而终，就是为了逃生在围栏上撞死。而绵羊山羊相对“神经大条”，最终被人类拿下。</p>
<p>　　所以“多愁善感”不是老板喜欢的品质——还要补充一点：有思想的“社畜”尤其危险。</p>
<p>　　第五，敢于当众交配</p>
<p>　　交配是动物的天性，但即使如此，很多动物也不喜欢当众交配。人类也不喜欢，但为了保证“产量”，就需要驯化动物定时定点交配，。</p>
<p>　　猎豹作为比狗强N倍的猎兽，历代都有人试图驯化，但最后都在“当众交配”这个环节上失败，猎豹可以帮助人类打猎，就是不愿意在笼子里交配——丢不起这个脸。</p>
<p>　　驯化的本质是“奴役”，真正的“奴役”是精神奴役，所以羞耻感作为“高级动物”的特权，是“驯化动物”们一定要被剥夺的。</p>
<p>　　第六，群居结构</p>
<p>　　驯化到了高级阶段，就需要一两个人管一大群动物，这就必需是群居动物。</p>
<p>　　群居动物有一个特点，它们的内部总是分等级的，这样，人类只要掌握了“领头的”，就能轻易控制一大群动物。甚至人类可以安排一个其他动物作为它们的首领，比如牧羊犬。</p>
<p>　　所以只有小公司敢扁平化，大公司嘴上说平等，实际上总是等级森严。</p>
<p>　　这六点总结成一句话：你被驯化了，是你天生的性格问题。</p>
<p>　　所以，我们回头再说狗——其实是狼的一种，它的驯化，没那么简单。</p>
<p>　　4</p>
<p>　　人驯化了狗，狗也驯化了人</p>
<p>　　大部分驯养动物，不管它们生前是派什么用处的，死后都要贡献自己的肉，除了蜜蜂、蚕这些天生没肉的。</p>
<p>　　但狗却是一个例外，很多民族都有不吃狗肉的禁忌，到了今天，成为文明社会的共识（后来多了猫，这个后面再说）。</p>
<p>　　不能吃狗的原因，据说是因为“狗是人类的朋友，是我们的家人，你怎么可以吃家人和朋友呢”，这个原因……好吧，难道猪啊牛啊羊啊天生就下贱，就是人类的食物？</p>
<p>　　现代社会，之前非食用功能的动物分成了两种，像牛羊变成纯供肉的，马、骆驼变成纯功能性的，唯独狗既没有功能（除了少数特殊品种），也不让吃肉。</p>
<p>　　前面说过，狗并非是人驯化的，而是“自愿”从狼变成狗，这个“自愿”当然是一个比喻，其实这是一种“双向驯化”，人驯化了狗的同时，狗也驯化了人。</p>
<p>　　狗驯化人类的方法就是让人类产生了独特的情感，比如“狗是人类的朋友，是我们的家人，你怎么可以吃家人和朋友呢”这一类信仰。</p>
<p>　　所以这种驯化动物，人类给它们一个专门的名词——宠物。宠物的出现，彻底改变了驯养关系。</p>
<p>　　黑格尔有一个“主仆辩证法”，他把人与物的关系称为“主仆关系”，仆人依附于主人，但主人把越来越多的事交给仆人，就会发生关系逆转，最后是主人离不开仆人。如果仆人是纯功能性的，那还好办，换一个就是了，但如果这个“仆人”是精神性的，就不好换了。</p>
<p>　　所以成为宠物的第一步要去功能化，这一点，猫比狗还要成功，猫最初是用来抓老鼠保护谷仓里的粮食的，现在连这老本行都不用干了。</p>
<p>　　第二步是提供独特的“情感陪伴价值”。</p>
<p>　　猫是独居动物，地盘意识很强，对人类的依附关系和忠诚度都不如狗，但人类就是喜欢吸猫当铲屎官，不得不说这是一种错位竞争，喵星人和汪星人分别满足的是不同人的不同情感需求。</p>
<p>　　“宠物”是一种双向驯化，这种关系在人与公司的关系也同样存在，有些员工不但是公司的“宠物”，还是公司的“吉祥物”。</p>
<p>　　稍微大一点的公司，都有一类老员工，级别不高，能力没有，但不管效益好坏，都能牢牢占据公司宝贵的“人头预算”，凭的就是两个字：忠诚。</p>
<p>　　咨询公司 Leadership IQ 有一个调查统计：能力最弱的员工在对公司的忠诚度指标上，比能力强的员工更高，对自己的公司更有荣誉感。</p>
<p>　　就算是崇尚“狼性文化”公司，晋升加薪机会都是有限的，那些能力强又升不上去的，会自行离开。所以我的《职场如戏，看看你在“玩家食物链”的哪个环节？》一文提出：任何一个团队结构中，贡献业绩的“狼”的比例都不会太高，也不用太高，贡献“忠诚度”的“狗”才是主流。</p>
<p>　　《小王子》里的小王子说：“如果你驯服了我，我们就互相不可缺少了。”</p>
<p>　　驯服，是现代社会秩序的要求。</p>
<p>　　5</p>
<p>　　现代化就是驯化</p>
<p>　　虽然穿越剧里的主人公们都混得不错，可如果你真的穿越到古代，你会发现能够买到的东西非常非常少，几乎所有的东西都要你自己去制造，这就是中学课本里学的“自给自足的自然经济”。</p>
<p>　　那么相对而言，商品社会就是一个把所有东西都变成商品的过程，包括人本身。</p>
<p>　　东西不会自然变成商品，方法只有两个字——驯化。</p>
<p>　　普普通通的大米变成礼盒包装的五常大米，皮具店里的老皮匠做的包包变成奢侈品，这是物的驯化；自由散漫的孩子变成遵纪守法的学生，学生毕业后再变成任劳任怨的“社畜”，就是人的“驯化”。</p>
<p>　　富士康 80 年代在深圳的工厂，工人来自全国各地，在每天十几个小时繁忙的劳作之后，每天下班还要聚在一起学习“郭总语录”，这是农民向流水线上的工人的“驯化”。</p>
<p>　　不过，人毕竟是人，不会甘心被驯化，就像总有一些狼不愿意变成狗。</p>
<p>　　这就引发了本文最后的灵魂一问，经驯化的我们还能够重新“野化”，重归自由吗？</p>
<p>　　6</p>
<p>　　一个特立独行的新物种</p>
<p>　　澳州有一种动物叫“澳州野狗”，是东亚家犬的一个分支，由人类遗弃在澳州的狗野化而成，它们捕猎袋鼠、野兔，在缺少大型食肉动物的澳洲大陆，占据了食物链的顶端。</p>
<p>　　后来的澳州土著和欧洲人试图重新驯化“澳州野狗”，却都没有成功，因为它们不但性格凶猛，还丧失了消化淀粉的能力，“退回”它们的狼类祖先的状态了。</p>
<p>　　类似的还有美国野猪，由欧洲人把家猪带到美洲，野化后与真正的野猪杂交而成的介于家猪与野猪之间的品种。</p>
<p>　　进化没有方向，所以野化不是退回祖先的状态，而是演化成另一个新物种，既有野生动物的特征，又有驯化动物的特征。</p>
<p>　　王小波有一篇很有的名的杂文《一只特立独行的猪》，里面有一只能学山羊跨栏，学猫上屋顶，学人类社会的汽笛叫的自由主义的猪，拒绝被阉割的命运，逃出人类的地盘，成为一个新物种。</p>
<p>　　王小波说：“除了这只猪，还没见过谁敢于如此无视对生活的设置。相反，我倒见过很多想要设置别人生活的人，还有对被设置的生活安之若素的人。”</p>
<p>　　所以说，这个世界上有两种人，第一种人拼命想安排我们的命运，第二种人对别人安排的命运安之若素，而我们要做的是王小波说的第三种人——新物种。</p>
<p>　　不管我们是自由人还是社畜状态，最重要的是保持随时进化成新物种的能力。</p>
<p>　　</p>
<blockquote>
<p>原文:<a href="https://news.cnblogs.com/n/652604/" target="_blank" rel="noopener">https://news.cnblogs.com/n/652604/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>思维</category>
      </categories>
      <tags>
        <tag>有点儿意思</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池的常见应用场景</title>
    <url>/%E6%8A%80%E6%9C%AF/20170810-ThreadPool-method.html</url>
    <content><![CDATA[<p>虽然python由于GIL的存在，对计算密集型任务处理效率比较低下，但对于常见的IO密集型任务(数据的读写、网络IO数据传输)还是很能提高效率的，<br>如果要为多线程任务创建大量线程。由于线程过多可能会出现许多性能问题，我们可以通过创建线程池来解决此问题。<br>线程池事先定义一组初始化和空闲的线程，当我们需要执行大量任务时，与为每个任务实例化新线程相比显然更优，线程池可以更好得管理并发执行的大量线程</p>
<a id="more"></a>



<h3 id="Pool-map"><a href="#Pool-map" class="headerlink" title="Pool.map()"></a>Pool.map()</h3><hr>
<blockquote>
<p>将可迭代项分为多个块，作为单独的任务提交给进程池。可利用池中的所有进程。多参数应用同一线程函数。但是结果与参数相对应的顺序返回。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line">from multiprocessing.pool import ThreadPool</span><br><span class="line"></span><br><span class="line">def thread_out_test(i):</span><br><span class="line">    nowtime &#x3D; datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">    print(nowtime,i)</span><br><span class="line">    return i</span><br><span class="line"></span><br><span class="line">def main_fun():</span><br><span class="line">    output &#x3D; [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">    pool &#x3D; ThreadPool(processes&#x3D;10)</span><br><span class="line">    result_data &#x3D; pool.map(thread_out_test, (i for i in output))</span><br><span class="line">    #关闭pool，不再接受新的主进程任务</span><br><span class="line">    pool.close()</span><br><span class="line">    #主进程阻塞后，等待子进程运行完后再关闭主进程</span><br><span class="line">    pool.join()</span><br><span class="line">    print(result_data)</span><br><span class="line">    return result_data</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main_fun()</span><br></pre></td></tr></table></figure>



<h3 id="Pool-apply-async-apply"><a href="#Pool-apply-async-apply" class="headerlink" title="Pool.apply_async()/apply()"></a>Pool.apply_async()/apply()</h3><hr>
<blockquote>
<p>Pool.apply():单独进程运行函数，但是希望当前进程在该函数返回之前一直阻塞</p>
</blockquote>
<blockquote>
<p>Pool.apply_async():单独进程运行函数，进程池异步执行许多功能调用 或者 调用许多不同的线程函数，结果的顺序不能保证与调用的顺序相同。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line">from multiprocessing.pool import ThreadPool</span><br><span class="line"></span><br><span class="line">def thread_out_test(i):</span><br><span class="line">    nowtime &#x3D; datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">    print(nowtime,i)</span><br><span class="line">    return i</span><br><span class="line"></span><br><span class="line">result_list &#x3D; []</span><br><span class="line">def callback_fun(result):</span><br><span class="line">    result_list.append(result)</span><br><span class="line"></span><br><span class="line">def main_fun():</span><br><span class="line">    output &#x3D; [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">    pool &#x3D; ThreadPool(processes&#x3D;10)</span><br><span class="line">    for i in output:</span><br><span class="line">        #可添加异步回调函数</span><br><span class="line">        pool.apply_async(thread_out_test, args&#x3D;(i,), callback&#x3D;callback_fun)</span><br><span class="line">    #关闭pool，不再接受新的主进程任务</span><br><span class="line">    pool.close()</span><br><span class="line">    #主进程阻塞后，等待子进程运行完后再关闭主进程</span><br><span class="line">    pool.join()</span><br><span class="line">    return result_list</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main_fun()</span><br></pre></td></tr></table></figure>

<h3 id="其他详细用法，参见ThreadPool中方法"><a href="#其他详细用法，参见ThreadPool中方法" class="headerlink" title="其他详细用法，参见ThreadPool中方法"></a>其他详细用法，参见ThreadPool中方法</h3><hr>
<p>Pool.map_async()</p>
<blockquote>
<p>map()方法的异步版本</p>
</blockquote>
<p>Pool.starmap()</p>
<blockquote>
<p>可迭代对象的元素也是可迭代的数据</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
